import Navigation from "@/comps/Navigation/navigation"
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import record from '../data/netflix.json'
import Link from 'next/link'
import Movie from '@/comps/HorizontalScroller/movie'
import { Player } from '@lottiefiles/react-lottie-player'
import Tvshow from "@/comps/VerticalScroller/tvshow"
import { useState, useEffect } from 'react'


export default function Library(){

    let random = record.sort(() => Math.random() - 0.5);

    // let comedy = record.filter(film => (film.listed_in === "Comedy" || "Comedies")).sort(() => Math.random() - 0.5);

    let tvshows = random.filter(film => (film.type === "TV Show"));
    let movie = random.filter(film => (film.type === 'Movie'));
    let r = random.filter(film => (film.rating === "R"));
    let tvma = random.filter(film => (film.rating === "TV-MA"));
    let tv14 = random.filter(film => (film.rating === "TV-14"));
    let tvpg = random.filter(film => (film.rating === "TV-PG"));
    let pg13 = random.filter(film => (film.rating === "PG-13"));
    let comedy = random.filter(film => (film.listed_in === "Comedy" || "Comedies"));
    let crime = random.filter(film => (film.listed_in === "Crime"));
    let children = random.filter(film => (film.listed_in === "Children & Family Movies"));
    let action = random.filter(film => (film.listed_in === "Action & Adventure"));
    let anime = random.filter(film => (film.listed_in === "Anime"));
    let horror = random.filter(film => (film.listed_in === "Crime"));
    let korean = random.filter(film => (film.listed_in === "Korean"));
    let oldest = record.sort((a, b) => (a.release_year > b.release_year) ? 1 : -1);
    let latest = record.sort((a, b) => (a.release_year < b.release_year) ? 1 : -1);

    const [category, setCategory] = useState(movie)
    const [header, setHeader] = useState('All Movies')

    const [selected, setSelected] = useState(false);

    const [filterMenu, setFilterMenu] = useState(false);
    const handleMenu = () => {
        setFilterMenu(!filterMenu);
    }

    const color = selected ? 'red' : 'black';
    

    const handleCategory = (e) => {
        setCategory(e);
        setSelected(true);
        if(e === movie){
            setHeader('All Movies')
        } else if(e === tvshows){
            setHeader('All TV Shows')
        } else if(e === r){
            setHeader('R Rated')
        } else if(e === tvma){
            setHeader('TV-MA Rated')
        } else if(e === tv14){
            setHeader('TV-14 Rated')
        } else if(e === tvpg){
            setHeader('TV-PG Rated')
        } else if(e === pg13){
            setHeader('PG-13 Rated')
        } else if(e === comedy){
            setHeader('Comedy')
        } else if(e === crime){
            setHeader('Crime')
        } else if(e === children){
            setHeader('Children & Family Movies')
        } else if(e === action){
            setHeader('Action & Adventure')
        } else if(e === anime){
            setHeader('Anime')
        } else if(e === horror){
            setHeader('Horror')
        } else if(e === korean){
            setHeader('Korean')
        } 
    }

    const [showComponent, setShowComponent] = useState(false);
    
    useEffect(() => {
        setShowComponent(true);
    },[])

    return (
        <>
            <Head>
                <title>Spot — Library</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
                <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="true"/>
                <link href="https://fonts.googleapis.com/css2?family=Bebas+Neue&family=Manrope:wght@400;500;600;700&display=swap" rel="stylesheet"/>
            </Head>

            <div className={styles.main} style={{maxHeight:'100vh', overflowY:'none'}}>

                <Navigation />

                <div className={styles.librarylayout}>

                <div className={styles.sidemenucont}>
                    <div className={filterMenu ? `${styles.mobilesidemenu}` : `${styles.sidemenu}`}>
                        
                        <ul>
                            <li onClick={() => handleCategory(movie)}>All Movies</li>
                            <ul>
                                <li onClick={() => handleCategory(r)}>R-Rated</li>
                            </ul>
                            <li onClick={() => handleCategory(tvshows)}>All TV Shows</li>
                            <ul>
                                <li onClick={() => handleCategory(tvma)}>TV—MA</li>
                                <li onClick={() => handleCategory(tv14)}>TV—14</li>
                                <li onClick={() => handleCategory(tvpg)}>TV—PG</li>
                                <li onClick={() => handleCategory(pg13)}>PG—13</li>
                            </ul>
                            {/* <li style={{cursor:'not-allowed'}}>Alphabetical (A—Z)</li>
                            <ul>
                                <li>A — Z</li>
                                <li>Z — A</li>
                            </ul> */}

                            <li style={{cursor:'not-allowed'}}>Genres</li>
                                <ul>
                                    <li onClick={() => handleCategory(action)}>Action & Thrillers</li>
                                    <li onClick={() => handleCategory(anime)}>Anime</li>
                                    <li onClick={() => handleCategory(children)}>Children & Family</li>
                                    <li onClick={() => handleCategory(comedy)}>Comedy</li>
                                    <li onClick={() => handleCategory(crime)}>Crime</li>
                                    <li onClick={() => handleCategory(horror)}>Horror</li>
                                    <li onClick={() => handleCategory(korean)}>Korean</li>
                                </ul>
                            {/* <li style={{cursor:'not-allowed'}}>Release Year</li>
                            <ul>
                                <li onClick={() => handleCategory(latest)}>Latest</li>
                                <li onClick={() => handleCategory(oldest)}>Oldest</li>
                            </ul> */}


                        </ul>
                    </div>
                </div>

                <div className={styles.scrollablecont}>
                    <div className={styles.scrollablecontchild}>
                    <img className={styles.sorting} onClick={handleMenu} src='/sorting.svg'></img> 
                    <h1 className={styles.categoryhead}>{header}</h1>
                    </div>

                <div className={styles.vertiscroll}>

                {showComponent && [...category].map((item,index) => (
                    <div className={styles.librarycont} key={index} style={{backgroundImage:`linear-gradient(to bottom, rgba(255, 255, 255, 0.1), rgba(0, 0, 0, 0.6)), url('${item.imageurl}')`}}>
                        <div className={styles.column}>
                        <div className={styles.row}>
                        <h1 className={styles.movietitle}>{item.title}</h1>
                    </div>
                    <div className={styles.row}>

                        <div className={styles.column}>
                            <p>{item.duration}</p>
                            <p>{item.release_year}</p>
                        </div>

                        <div className={styles.type_rating}>
                        {item.type === 'Movie' ? <img src='/movie.svg' alt='Movie'/> : <img src='/tv.svg' alt='TV Series'/>}
                        <p>{item.rating}</p>
                        </div>
                    </div>
                </div>
            </div>
            ))}

        </div>

        </div>
                    {/* { category === 'All Movies' ? <Tvshow/> : <Tvshow/>} */}
                    
                </div>

            </div>
        </>
    )
}